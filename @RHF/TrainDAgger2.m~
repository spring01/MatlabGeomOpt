function finalCoeffs = TrainDAgger2(obj, densVecSet, refDensVecSet)

% keep only the densities we essentially use
stepSize = 2;
densVecSet = [densVecSet(:, 1), densVecSet];
if(mod(size(densVecSet, 2), 2) == 0)
    densVecSet = [densVecSet, densVecSet(:,end)];
end
densVecSet = densVecSet(:,1:stepSize:end);

finalCoeffs = {};
for iter = 1:size(densVecSet, 2)-1
    
    % linear regression: rho_exp_{i-4}, ... , rho_exp_{i-1}, rho_exp_{i} -> rho_exp_{i+1} => rho_tr_i+1
    % linear regression: rho_exp_{i-4}, ... , rho_exp_{i-1}, rho_tr_{i} -> rho_exp_{i+1} => rho_tr2_i+1
    % linear regression: rho_exp_{i-4}, ... , rho_tr_{i-1}, rho_tr2_{i} -> rho_exp_{i+1} => rho_tr3_i+1
    
    useIndices = iter-8:iter;
    useIndices = useIndices(useIndices > 0);
    densVecSubset = densVecSet(:,useIndices);
    refDensVec = refDensVecSet(:,iter+1);
    
    iniCoeffs = zeros(length(useIndices), 1);
    iniCoeffs(end) = 1;
    
    finalCoeffs{} = ConstrLinReg(densVecSubset, refDensVec)
    
    for daggerIter = 1:iter-1
    end
    
    
end

end

function diisCoefficients = ConstrLinReg(densVecSubset, refDensVec)
numVectors = size(densVecSubset, 2);
onesVec = ones(numVectors, 1);
hessian = [densVecSubset'*densVecSubset, onesVec; onesVec', 0];
diisCoefficients = hessian \ [densVecSubset'*refDensVec; 1];
predDensVector = densVecSubset * diisCoefficients(1:end-1);
diisCoefficients = diisCoefficients(1:end-1);
end

